import com.android.build.gradle.LibraryPlugin
import com.jfrog.bintray.gradle.BintrayPlugin

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url 'https://maven.google.com/' }
    }
}

ext.createPom = { pom ->
    pom.withXml {
        def xml = {
            name pomName
            description pomDescription
            url pomUrl

            scm {
                connection 'scm:git:https://github.com/F43nd1r/acra.git'
                developerConnection 'scm:git:git@github.com:F43nd1r/acra.git'
                url pomVcsUrl
            }

            licenses {
                license {
                    name pomLicenseName
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'kevin.gaudin'
                    name 'Kevin Gaudin'
                }
                developer {
                    id 'william.ferguson'
                    name 'William Ferguson'
                }
                developer {
                    id 'f43nd1r'
                    name 'Lukas Morawietz'
                }
            }
        }
        xml.resolveStrategy = DELEGATE_FIRST
        asNode().children().last() + xml
    }
}

subprojects {
    plugins.withType(LibraryPlugin) {
        android {
            compileSdkVersion Integer.parseInt(androidVersion)
            buildToolsVersion androidBuildToolsVersion

            defaultConfig {
                minSdkVersion androidMinVersion
                targetSdkVersion androidVersion
                versionName version
            }
            buildTypes {
                release {
                    minifyEnabled false
                }
            }
            lintOptions {
                abortOnError false
            }
        }

        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            classifier = 'sources'
        }

        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            source += files('build/generated/source/aidl/release') + files('build/generated/source/apt/release')
            classpath += files(android.getBootClasspath().join(File.pathSeparator))
            options.with {
                linksOffline "http://d.android.com/reference", "${android.getSdkDirectory().getAbsolutePath()}/docs/reference"
            }
            doFirst {
                try {
                    javadoc.classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files }) + files('build/generated/source/r/release')
                } catch (e) {
                    logger.warn('failed to get classpath for javadoc', e)
                }
            }
            afterEvaluate {
                dependsOn assembleRelease
                options {
                    opt ->
                        project.configurations.implementation.getAllDependencies().each { dep ->
                            if(dep.group != project.group) return
                            def uriPart = "${dep.group}/${dep.name}/${dep.version}/"
                            try {
                                def url = "http://www.javadoc.io/page/${uriPart}"
                                def depProject = project.parent.childProjects[dep.name]
                                def destination = "${depProject.buildDir}/docs/javadoc/"
                                opt.linksOffline(url, destination)
                            } catch (ignored) {
                                println "${uriPart} javadoc won't be linked"
                            }
                        }
                }
            }
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            from javadoc
            classifier = 'javadoc'
        }

    }
    plugins.withType(JavaPlugin) {
        task sourcesJar(type: Jar) {
            from sourceSets.main.allSource
            classifier = 'sources'
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }
    }
    plugins.withType(MavenPublishPlugin) {
        publishing {
            publications {
                maven(MavenPublication) {
                    groupId group
                    version version
                    artifact sourcesJar
                    artifact javadocJar
                    createPom(pom)
                    if (tasks.findByName('bundleRelease')) {
                        artifact bundleRelease
                        pom.withXml {
                            def dependenciesNode = asNode().appendNode('dependencies')

                            // List all compile dependencies and write to POM
                            configurations.implementation.getAllDependencies().each { dep ->
                                if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                                    return // ignore invalid dependencies

                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', dep.group)
                                dependencyNode.appendNode('artifactId', dep.name)
                                dependencyNode.appendNode('version', dep.version)

                                if (!dep.transitive) {
                                    // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                                    def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', '*')
                                    exclusionNode.appendNode('artifactId', '*')
                                } else if (!dep.properties.excludeRules.empty) {
                                    // Otherwise add specified exclude rules
                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
                                    dep.properties.excludeRules.each { rule ->
                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', rule.group ?: '*')
                                        exclusionNode.appendNode('artifactId', rule.module ?: '*')
                                    }
                                }
                            }
                        }
                    } else {
                        from components.java
                    }
                }
            }
        }
        plugins.withType(BintrayPlugin) {
            bintray {
                user = artifactoryUser
                key = artifactoryApiKey
                publications = ['maven']
                publish = true
                pkg {
                    repo = 'maven'
                    name = pomName
                    websiteUrl = pomUrl
                    vcsUrl = pomVcsUrl
                    licenses = [pomLicenseName]
                    publicDownloadNumbers = true
                    version {
                        name = project.version
                        desc = pomDescription
                        mavenCentralSync {
                            sync = true
                            user = ossrhUser
                            password = ossrhPassword
                        }
                    }
                }
            }
            bintrayUpload.dependsOn(build, javadocJar, sourcesJar, 'generatePomFileForMavenPublication')
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
